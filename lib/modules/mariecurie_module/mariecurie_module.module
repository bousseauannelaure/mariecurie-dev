<?php

/**
 * @file
 * Custom actions for marie curie site.
 */

/**
 * Implements hook_help().
 */
function mariecurie_module_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    case 'admin/help#block':
      return '<p>' . t('Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions "Sidebar first", "Sidebar second", "Featured", "Content", "Header", "Footer", etc., and a block may appear in any one of these areas. The <a href="@blocks">blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.', array('@blocks' => url('admin/structure/block'))) . '</p>';

    // Help for another path in the block module
    case 'admin/structure/block':
      return '<p>' . t('This page provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions. Since not all themes implement the same regions, or display regions in the same way, blocks are positioned on a per-theme basis. Remember that your changes will not be saved until you click the <em>Save blocks</em> button at the bottom of the page.') . '</p>';
  }
}

/**
 * Implements hook_list_option_info().
 */
function mariecurie_module_list_option_info() {
  $info['look_and_feel'] = array(
    'label' => t('Default Look and Feel'),
    'callback' => 'mariecurie_module_look_and_feel_options',
  );
  $info['look_and_feel_module'] = array(
    'label' => t('Look and Feel for Modules'),
    'callback' => 'mariecurie_module_look_and_feel_module_options',
  );
  $info['look_and_feel_slides'] = array(
    'label' => t('Look and Feel for Slides'),
    'callback' => 'mariecurie_module_look_and_feel_slides_options',
  );

  return $info;
}

function mariecurie_module_look_and_feel_options() {
  $options['bg_grey'] = t('Background Grey');
  $options['bg_white'] = t('Background White');

  return $options;
}

function mariecurie_module_look_and_feel_module_options() {
  $options['m_blue'] = t('Blue Module');
  $options['m_red'] = t('Red Module');
  $options['m_deactivated'] = t('Coming soon Module');

  return $options;
}

function mariecurie_module_look_and_feel_slides_options() {
  $options['s_media_left'] = t('Media at left');
  $options['s_media_right'] = t('Media at right');
  $options['s_box_title'] = t('Box with title');

  return $options;
}

/**
 * Implements hook_preprocess().
 */
function mariecurie_module_preprocess(&$variables) {
  if (!empty($variables['paragraphs_item'])) {
    $suffix = '';
    if (!empty($variables['field_msc_look_and_feel'])) {
      $suffix = '__' . $variables['field_msc_look_and_feel'][0]['value'];
    }
    elseif (!empty($variables['field_msc_look_and_feel_modules'])) {
      $suffix = '__' . $variables['field_msc_look_and_feel_modules'][0]['value'];
    }
    elseif (!empty($variables['field_msc_look_and_feel_slides'])) {
      $suffix = '__msc_slider_component__' . $variables['field_msc_look_and_feel_slides'][0]['value'];
    }

    if (!empty($suffix)) {
      $variables['theme_hook_suggestions'][] = $variables['theme_hook_suggestions'][0] . $suffix;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mariecurie_module_preprocess_page(&$variables) {
  if (!empty($variables['node']) && ($current_node = $variables['node']) && $current_node->type === 'msc_page' && $current_node->field_msc_slider) {
    $variables['slider'] = field_view_field('node', $current_node, 'field_msc_slider', 'render_programmatically');
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function mariecurie_module_preprocess_field(&$variables) {
  if (
    !empty($variables['element']['#field_name']) &&
    $variables['element']['#field_name'] === 'field_msc_video' &&
    !empty($variables['items'][0]) &&
    array_key_exists('#image_style', $variables['items'][0]['file'])
  ) {
    $variables['items'][0]['file']['#image_style'] = '552x335';
  }
}

/**
 * Implements hook_form_alter().
 */
function mariecurie_module_form_alter(&$form, &$form_state, $form_id){
  switch ($form_id){
    case 'advpoll_cancel_vote_form':
      $form['actions']['show_results'] = array(
        '#type' => 'submit',
        '#value' => t('View results'),
        #access' => TRUE,
        '#weight' => 15,
        '#submit' => array('mariecurie_module_go_to_results_cancel'),
      );
      break;
    case 'advpoll_choice_form':
      $form['actions']['show_results'] = array(
        '#type' => 'submit',
        '#value' => t('View results'),
        #access' => TRUE,
        '#weight' => 15,
        '#submit' => array('mariecurie_module_go_to_results'),
      );
      break;
  }
}

function mariecurie_module_go_to_results($form, &$form_state){
  //$results_path=$_GET['destination'] ? $_GET['destination'] : 'node/'.$form['#nid'].'/results';
  $results_path='node/'.$form_state['build_info']['args'][0]->nid.'/results';
  drupal_goto($results_path);
}

function mariecurie_module_go_to_results_cancel($form, &$form_state){
  //$results_path=$_GET['destination'] ? $_GET['destination'] : 'node/'.$form['#nid'].'/results';
  $results_path='node/'.$form_state['build_info']['args'][0].'/results';
  drupal_goto($results_path);
}

/**
 * Implements hook_block_info().
 */
function mariecurie_module_block_info() {
  // This example comes from node.module.
  $blocks['syndicate'] = array(
    'info' => t('Syndicate'),
    'cache' => DRUPAL_NO_CACHE
  );

  $blocks['recent'] = array(
    'info' => t('Recent content'),
    // DRUPAL_CACHE_PER_ROLE will be assumed.
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function mariecurie_module_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'syndicate':
      $block['subject'] = t('Syndicate');
      $block['content'] = array(
        '#theme' => 'feed_icon',
        '#url' => 'rss.xml',
        '#title' => t('Syndicate'),
      );
      break;

    case 'recent':
      if (user_access('access content')) {
        $block['subject'] = t('Recent content');
        if ($nodes = node_get_recent(variable_get('node_recent_block_count', 10))) {
          $block['content'] = array(
            '#theme' => 'node_recent_block',
            '#nodes' => $nodes,
          );
        } else {
          $block['content'] = t('No content available.');
        }
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function mariecurie_module_block_configure($delta = '') {
  // This example comes from node.module.
  $form = array();
  if ($delta == 'recent') {
    $form['node_recent_block_count'] = array(
      '#type' => 'select',
      '#title' => t('Number of recent content items to display'),
      '#default_value' => variable_get('node_recent_block_count', 10),
      '#options' => drupal_map_assoc(array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 30)),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function mariecurie_module_block_save($delta = '', $edit = array()) {
  // This example comes from node.module.
  if ($delta == 'recent') {
    variable_set('node_recent_block_count', $edit['node_recent_block_count']);
  }
}

