<?php

/**
 * @file
 * TODO: Enter file description here.
 */

/**
 * Implements hook_help().
 */
function msc_custom_components_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    case 'admin/help#block':
      return '<p>' . t('Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions "Sidebar first", "Sidebar second", "Featured", "Content", "Header", "Footer", etc., and a block may appear in any one of these areas. The <a href="@blocks">blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.', array('@blocks' => url('admin/structure/block'))) . '</p>';

    // Help for another path in the block module
    case 'admin/structure/block':
      return '<p>' . t('This page provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions. Since not all themes implement the same regions, or display regions in the same way, blocks are positioned on a per-theme basis. Remember that your changes will not be saved until you click the <em>Save blocks</em> button at the bottom of the page.') . '</p>';
  }
}

/**
 * Implements hook_list_option_info().
 */
function msc_custom_components_list_option_info() {
  $info['look_and_feel'] = array(
    'label' => t('Default Look and Feel'),
    'callback' => 'msc_custom_components_look_and_feel_options',
  );
  $info['look_and_feel_module'] = array(
    'label' => t('Look and Feel for Modules'),
    'callback' => 'msc_custom_components_look_and_feel_module_options',
  );
  $info['look_and_feel_slides'] = array(
    'label' => t('Look and Feel for Slides'),
    'callback' => 'msc_custom_components_look_and_feel_slides_options',
  );

  return $info;
}

function msc_custom_components_look_and_feel_options() {
  $options['bg_grey'] = t('Background Grey');
  $options['bg_white'] = t('Background White');

  return $options;
}

function msc_custom_components_look_and_feel_module_options() {
  $options['m_blue'] = t('Blue Module');
  $options['m_red'] = t('Red Module');
  $options['m_deactivated'] = t('Coming soon Module');

  return $options;
}

function msc_custom_components_look_and_feel_slides_options() {
  $options['s_media_left'] = t('Media at left');
  $options['s_media_right'] = t('Media at right');
  $options['s_box_title'] = t('Box with title');

  return $options;
}

/**
 * Implements hook_menu().
 */
function msc_custom_components_menu() {
  $items = array();
  $items['admin/config/TODO-SECTION/msc_custom_components'] = array(
    'title' => 'Administer Marie Curie Custom Components',
    'description' => 'Configure settings for Marie Curie Custom Components.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('msc_custom_components_settings_form'),
    'access arguments' => array('administer msc_custom_components'),
    'file' => 'msc_custom_components.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function msc_custom_components_permission() {
  $permissions = array();
  $permissions['administer msc_custom_components'] = array(
    'title' => t('TODO: enter permission title'),
    'description' => t('TODO: enter permission description'),
  );

  return $permissions;
}

/**
 * Implements hook_preprocess().
 */
function msc_custom_components_preprocess(&$variables) {
  if (!empty($variables['paragraphs_item'])) {
    $suffix = '';
    if (!empty($variables['field_msc_look_and_feel'])) {
      $suffix = '__' . $variables['field_msc_look_and_feel'][0]['value'];
    }
    elseif (!empty($variables['field_msc_look_and_feel_modules'])) {
      $suffix = '__' . $variables['field_msc_look_and_feel_modules'][0]['value'];
    }
    elseif (!empty($variables['field_msc_look_and_feel_slides'])) {
      $suffix = '__msc_slider_component__' . $variables['field_msc_look_and_feel_slides'][0]['value'];
    }

    if (!empty($suffix)) {
      $variables['theme_hook_suggestions'][] = $variables['theme_hook_suggestions'][0] . $suffix;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function msc_custom_components_preprocess_page(&$variables) {
  if (!empty($variables['node']) && ($current_node = $variables['node']) && $current_node->type === 'msc_page' && $current_node->field_msc_slider) {
    $variables['slider'] = field_view_field('node', $current_node, 'field_msc_slider', 'render_programmatically');
  }
}
